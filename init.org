#+TITLE: Emacs config file
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* early-init.el Configuration

#+begin_src emacs-lisp :tangle ./early-init.el
;; gc.
(setq gc-cons-threshold 402653184)
(add-hook 'after-emacs-hook '(lambda ()
			       ;; restore after startup
			       (setq gc-cons-threshold 16777216)))

;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)

;; In Emacs 27+, package initialization occurs before `user-init-file' is
;; loaded, but after `early-init-file'. We must prevent Emacs from doing
;; it early!
(setq package-enable-at-startup nil)

;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are
;; compiled ahead-of-time when they are installed and site files are compiled
;; when gccemacs is installed.
(setq comp-deferred-compilation nil)

#+end_src


* Init.el Configuration

** Some Basic Settings

#+begin_src emacs-lisp

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

(let (file-name-handler-alist)
  ;; Ensure Emacs is running out of this file's directory
  (setq user-emacs-directory (file-name-directory load-file-name)))

(defvar salt-dir-private (expand-file-name "private" user-emacs-directory)
  "All files you create under the private folder are yours for personalization.")

;;; .local folder
(defvar salt-dir-local (expand-file-name ".local" user-emacs-directory)
  "Folder of configure files, backup files, template files and so on.")

;;; Cache folder
(defvar salt-dir-cache (expand-file-name "cache" salt-dir-local))

;;; Template folder
(defvar salt-dir-template (expand-file-name "template" salt-dir-local)
  "Folder path of template files.")

;; the load-path of core settings
(add-to-list 'load-path (expand-file-name "elisp/" user-emacs-directory))

;;; Create folders
(dolist (dir (list salt-dir-private
                   salt-dir-local
                   salt-dir-cache
                   salt-dir-template))
  (when (not (file-directory-p dir))
    (make-directory dir)))

#+end_src

** Basic UI

#+begin_src emacs-lisp

;;; Font and frame size
;; frame size
(setq initial-frame-alist
      (quote ((fullscreen . maximized))))

;;; Remove menu-bar, scroll-bar and tool-bar.
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)

(setq visible-bell t)

#+end_src


** straight

#+begin_src emacs-lisp

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;;; install use-package
(straight-use-package 'use-package)
(eval-and-compile
  (setq use-package-always-ensure nil)   ;; ESSENTIAL for `straight.el'
  (setq use-package-always-defer nil)
  (setq use-package-always-demand nil)
  (setq use-package-expand-minimally nil)
  (setq use-package-enable-imenu-support t)
  (setq use-package-compute-statistics nil))

;;; provides `straight-x-clean-unused-repos' (part of `straight.el')
(use-package straight-x
  :defer t)

#+end_src

** modus-themes
#+begin_src emacs-lisp
;;; modus themes
(use-package modus-themes
  :straight t
  :init
  (setq modus-themes-no-mixed-fonts t
        modus-themes-slanted-constructs t
        modus-themes-bold-constructs t
        modus-themes-fringes 'subtle    ; {nil,'subtle,'intense}
        modus-themes-mode-line '3d      ; {nil,'3d,'moody}
        modus-themes-syntax 'yellow-comments-green-strings ; Lots of options---continue reading the manual
        modus-themes-intense-hl-line nil
        modus-themes-paren-match 'subtle-bold ; {nil,'subtle-bold,'intense,'intense-bold}
        modus-themes-links 'neutral-underline ; Lots of options---continue reading the manual
        modus-themes-prompts 'intense         ; {nil,'subtle,'intense}
        modus-themes-completions 'moderate      ; {nil,'moderate,'opinionated}
        modus-themes-region nil ; {nil,'no-extend,'bg-only,'bg-only-no-extend}
        modus-themes-diffs nil  ; {nil,'desaturated,'fg-only,'bg-only}
        modus-themes-org-blocks 'grayscale      ; {nil,'grayscale,'rainbow}
        modus-themes-headings ; Lots of options---continue reading the manual
        '((1 . section)
          (2 . section-no-bold)
          (3 . rainbow-line)
          (t . rainbow-line-no-bold))
        modus-themes-variable-pitch-headings nil
        modus-themes-scale-headings nil
        modus-themes-scale-1 1.1
        modus-themes-scale-2 1.15
        modus-themes-scale-3 1.21
        modus-themes-scale-4 1.27
        modus-themes-scale-5 1.33)
  (set-face-attribute 'default nil :family "M+ 1mn Light" :height 200)
  (set-face-attribute 'variable-pitch nil :family "M+ 1mn Light" :height 200)
  (set-face-attribute 'variable-pitch nil :family "M+ 1mn Light" :height 200)
  :config
  (load-theme 'modus-vivendi t))

#+end_src

** display-line-numbers

#+begin_src emacs-lisp
;;; display line number
(use-package display-line-numbers
  :hook (prog-mode . display-line-numbers-mode)
  :hook (text-mode . display-line-numbers-mode))
#+end_src


** visual-fill-column

#+begin_src emacs-lisp
;;; TODO: deal with word-wrap issue of language-mixed style.
;;; visual-fill-column
(use-package visual-fill-column
  :straight t
  :init
  (setq visual-fill-column-inhibit-sensible-window-split t
        visual-fill-column-width 120)
  :hook
  (text-mode . visual-line-mode)
  (prog-mode . visual-line-mode)
  (visual-line-mode . visual-fill-column-mode)
  :config
  (add-hook 'visual-line-mode-hook #'(lambda ()
                                       (setq-local word-wrap nil)))
  (advice-add 'text-scale-adjust :after #'visual-fill-column-adjust))

#+end_src

* completion
** Virtico
#+begin_src emacs-lisp
;; Enable vertico
(use-package vertico
  :straight t
  :init
  (vertico-mode)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t))

#+end_src

** savehist and emacs
#+begin_src emacs-lisp
(use-package savehist
  :init
  (savehist-mode))

(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; Alternatively try `consult-completing-read-multiple'.
  (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

#+end_src


** cousult
#+begin_src emacs-lisp
;;; consult
(use-package consult
  :straight t
  :init
  (defun consult-fd (&optional dir)
    "Search for regexp with fd in DIR."
    (interactive "P")
    (let ((consult-fd-cmd '("fd" "--color=never" "--full-path")))
      (pcase-let ((`(,prompt . ,default-directory) (consult--directory-prompt "fd" dir)))
        (consult--find prompt consult-fd-cmd))))
  :config
  (fset 'multi-occur #'consult-multi-occur))
#+end_src

** marginalia
#+begin_src emacs-lisp
;;; Enable richer annotations using the Marginalia package
(use-package marginalia
  :straight t
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))
#+end_src

** embark
#+begin_src emacs-lisp
;;; embark
(use-package embark
  :straight t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("M-." . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

#+end_src

*** embark-consult
#+begin_src emacs-lisp
(use-package embark-consult
  :straight t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* magit
#+begin_src emacs-lisp
;;; magit
(use-package magit
  :straight t
  :init
  (setq transient-levels-file (expand-file-name "transient/levels" salt-dir-local)
        transient-values-file (expand-file-name "transient/values" salt-dir-local)
        transient-history-file (expand-file-name "transient/history" salt-dir-local))
  :defer t)
#+end_src

* projectile
#+begin_src emacs-lisp
(use-package projectile
  :straight t
  :hook (after-init . projectile-mode)
  :config
  (setq projectile-completion-system 'default
        projectile-enable-caching t
        projectile-indexing-method 'hybrid
        projectile-known-projects-file (expand-file-name "projectile.projects" salt-dir-cache)
        projectile-cache-file (expand-file-name "projectile.cache" salt-dir-cache)
        projectile-ignored-projects '("~/" "/tmp")))

#+end_src

